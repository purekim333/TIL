'''
아래 그림과 같은 미로가 있다. 16*16 행렬의 형태로 만들어진 미로에서 흰색 바탕은 길, 노란색 바탕은 벽을 나타낸다.

가장 좌상단에 있는 칸을 (0, 0)의 기준으로 하여, 가로방향을 x 방향, 세로방향을 y 방향이라고 할 때, 미로의 시작점은 (1, 1)이고 도착점은 (13, 13)이다.

주어진 미로의 출발점으로부터 도착지점까지 갈 수 있는 길이 있는지 판단하는 프로그램을 작성하라.

아래의 예시에서는 도달 가능하다.
 

  

아래의 예시에서는 출발점이 (1, 1)이고, 도착점이 (11, 11)이며 도달이 불가능하다.


[입력]

각 테스트 케이스의 첫 번째 줄에는 테스트 케이스의 번호가 주어지며, 바로 다음 줄에 테스트 케이스가 주어진다.

총 10개의 테스트케이스가 주어진다.

테스트 케이스에서 1은 벽을 나타내며 0은 길, 2는 출발점, 3은 도착점을 나타낸다.

[출력]

#부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 도달 가능 여부를 1 또는 0으로 표시한다 (1 - 가능함, 0 - 가능하지 않음).
'''

'''입력
1
1111111111111111
1210000000100011
1010101110101111
1000100010100011
1111111010101011
1000000010101011
1011111110111011
1010000010001011
1010101111101011
1010100010001011
1010111010111011
1010001000100011
1011101111101011
1000100000001311
1111111111111111
1111111111111111
2
1111111111111111
1200000010000011
1011111011111011
1000001010000011
1110101010111011
1010101010100011
1011111010111111
1000001010000011
1011101011111011
1010101010000011
1010101010111111
1010100000130011
1010111111111011
1000000000000011
1111111111111111
1111111111111111
'''

import sys; sys.stdin = open('input.txt')

from collections import deque

def bfs(s_x, s_y, e_x, e_y) :
    visited = [[0] * 16 for _ in range(16)]
    D = [[0] * 16 for _ in range(16)]
    P = [[0] * 16 for _ in range(16)]

    Q = deque()

    Q.append((s_x, s_y))
    visited[s_x][s_y] = 1

    while Q :
        v_x, v_y = Q.popleft()
        if arr[v_x][v_y] == 3 :
            return 1
        
        for dr, dc in [[1, 0], [0, -1], [-1, 0], [0, 1]] :
            w_x = v_x + dr
            w_y = v_y + dc
            if 0<= w_x < 16 and 0<= w_y < 16 and visited[w_x][w_y] == 0 and arr[w_x][w_y] != 1 :
                Q.append((w_x, w_y))
                visited[w_x][w_y] = 1
                D[w_x][w_y] = D[v_x][v_y] + 1
                P[w_x][w_y] = (v_x, v_y)
    return 0

for _ in range(10) :
    tc = int(input())

    arr = [list(map(int, input())) for _ in range(16)]

    for x in range(16) :
        for y in range(16) :
            if arr[x][y] == 2 :
                s_x, s_y = x, y
            elif arr[x][y] == 3:
                e_x, e_y = x, y

    ans = bfs(s_x, s_y, e_x, e_y)

    print(f'#{tc} {ans}')


